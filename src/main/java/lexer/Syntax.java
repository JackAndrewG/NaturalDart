
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 22 05:00:24 ECT 2022
//----------------------------------------------------

package lexer;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import utils.Store;
import utils.Operations;
import utils.Conditions;
import utils.MsgUI;
import model.Variable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 22 05:00:24 ECT 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\011\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\011\000\002\006\011\000\002\006\007\000\002\006\007" +
    "\000\002\006\007\000\002\007\003\000\002\007\004\000" +
    "\002\007\011\000\002\013\011\000\002\014\006\000\002" +
    "\011\011\000\002\011\011\000\002\011\011\000\002\011" +
    "\011\000\002\011\011\000\002\011\011\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\011\010\000" +
    "\002\011\010\000\002\011\010\000\002\011\010\000\002" +
    "\011\010\000\002\011\010\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\003" +
    "\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\007\005\001\002\000\004\002\221\001" +
    "\002\000\004\036\006\001\002\000\004\022\007\001\002" +
    "\000\004\023\010\001\002\000\004\024\011\001\002\000" +
    "\020\004\014\005\026\006\021\010\024\011\022\013\013" +
    "\032\025\001\002\000\022\004\ufffb\005\ufffb\006\ufffb\010" +
    "\ufffb\011\ufffb\013\ufffb\025\ufffb\032\ufffb\001\002\000\004" +
    "\022\213\001\002\000\004\032\173\001\002\000\022\004" +
    "\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\013\ufff9\025\ufff9" +
    "\032\ufff9\001\002\000\022\004\uffff\005\uffff\006\uffff\010" +
    "\uffff\011\uffff\013\uffff\025\uffff\032\uffff\001\002\000\022" +
    "\004\ufffd\005\ufffd\006\ufffd\010\ufffd\011\ufffd\013\ufffd\025" +
    "\ufffd\032\ufffd\001\002\000\022\004\014\005\026\006\021" +
    "\010\024\011\022\013\013\025\172\032\025\001\002\000" +
    "\004\032\163\001\002\000\004\022\140\001\002\000\024" +
    "\004\uffed\005\uffed\006\uffed\010\uffed\011\uffed\012\127\013" +
    "\uffed\025\uffed\032\uffed\001\002\000\004\022\100\001\002" +
    "\000\004\014\053\001\002\000\004\032\027\001\002\000" +
    "\006\014\031\026\030\001\002\000\022\004\ufff6\005\ufff6" +
    "\006\ufff6\010\ufff6\011\ufff6\013\ufff6\025\ufff6\032\ufff6\001" +
    "\002\000\006\031\033\032\032\001\002\000\012\015\037" +
    "\016\036\017\041\020\040\001\002\000\014\015\037\016" +
    "\036\017\041\020\040\026\035\001\002\000\006\031\043" +
    "\032\042\001\002\000\022\004\ufff3\005\ufff3\006\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\025\ufff3\032\ufff3\001\002\000\010" +
    "\030\uffd8\031\uffd8\032\uffd8\001\002\000\010\030\uffd9\031" +
    "\uffd9\032\uffd9\001\002\000\010\030\uffd6\031\uffd6\032\uffd6" +
    "\001\002\000\010\030\uffd7\031\uffd7\032\uffd7\001\002\000" +
    "\004\026\045\001\002\000\004\026\044\001\002\000\022" +
    "\004\uffe4\005\uffe4\006\uffe4\010\uffe4\011\uffe4\013\uffe4\025" +
    "\uffe4\032\uffe4\001\002\000\022\004\uffe2\005\uffe2\006\uffe2" +
    "\010\uffe2\011\uffe2\013\uffe2\025\uffe2\032\uffe2\001\002\000" +
    "\006\031\050\032\047\001\002\000\004\026\052\001\002" +
    "\000\004\026\051\001\002\000\022\004\uffe3\005\uffe3\006" +
    "\uffe3\010\uffe3\011\uffe3\013\uffe3\025\uffe3\032\uffe3\001\002" +
    "\000\022\004\uffe1\005\uffe1\006\uffe1\010\uffe1\011\uffe1\013" +
    "\uffe1\025\uffe1\032\uffe1\001\002\000\010\030\054\031\056" +
    "\032\055\001\002\000\012\015\037\016\036\017\041\020" +
    "\040\001\002\000\012\015\037\016\036\017\041\020\040" +
    "\001\002\000\012\015\037\016\036\017\041\020\040\001" +
    "\002\000\006\031\061\032\060\001\002\000\004\026\063" +
    "\001\002\000\004\026\062\001\002\000\022\004\uffdd\005" +
    "\uffdd\006\uffdd\010\uffdd\011\uffdd\013\uffdd\025\uffdd\032\uffdd" +
    "\001\002\000\022\004\uffdb\005\uffdb\006\uffdb\010\uffdb\011" +
    "\uffdb\013\uffdb\025\uffdb\032\uffdb\001\002\000\010\030\065" +
    "\031\067\032\066\001\002\000\004\026\072\001\002\000" +
    "\004\026\071\001\002\000\004\026\070\001\002\000\022" +
    "\004\uffdc\005\uffdc\006\uffdc\010\uffdc\011\uffdc\013\uffdc\025" +
    "\uffdc\032\uffdc\001\002\000\022\004\uffda\005\uffda\006\uffda" +
    "\010\uffda\011\uffda\013\uffda\025\uffda\032\uffda\001\002\000" +
    "\022\004\uffdf\005\uffdf\006\uffdf\010\uffdf\011\uffdf\013\uffdf" +
    "\025\uffdf\032\uffdf\001\002\000\006\030\074\032\075\001" +
    "\002\000\004\026\077\001\002\000\004\026\076\001\002" +
    "\000\022\004\uffde\005\uffde\006\uffde\010\uffde\011\uffde\013" +
    "\uffde\025\uffde\032\uffde\001\002\000\022\004\uffe0\005\uffe0" +
    "\006\uffe0\010\uffe0\011\uffe0\013\uffe0\025\uffe0\032\uffe0\001" +
    "\002\000\012\021\101\030\102\031\104\032\103\001\002" +
    "\000\012\030\114\031\117\032\115\035\113\001\002\000" +
    "\004\023\111\001\002\000\004\023\107\001\002\000\004" +
    "\023\105\001\002\000\004\026\106\001\002\000\022\004" +
    "\uffef\005\uffef\006\uffef\010\uffef\011\uffef\013\uffef\025\uffef" +
    "\032\uffef\001\002\000\004\026\110\001\002\000\022\004" +
    "\uffee\005\uffee\006\uffee\010\uffee\011\uffee\013\uffee\025\uffee" +
    "\032\uffee\001\002\000\004\026\112\001\002\000\022\004" +
    "\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0\013\ufff0\025\ufff0" +
    "\032\ufff0\001\002\000\014\021\uffce\030\uffce\031\uffce\032" +
    "\uffce\035\uffce\001\002\000\014\021\uffca\030\uffca\031\uffca" +
    "\032\uffca\035\uffca\001\002\000\014\021\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\035\uffcc\001\002\000\014\021\120\030\122" +
    "\031\124\032\123\035\121\001\002\000\014\021\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\035\uffc8\001\002\000\004\023\125" +
    "\001\002\000\014\021\uffcd\030\uffcd\031\uffcd\032\uffcd\035" +
    "\uffcd\001\002\000\014\021\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\035\uffc9\001\002\000\014\021\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\035\uffcb\001\002\000\014\021\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\035\uffc7\001\002\000\004\026\126\001\002\000" +
    "\022\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\013\ufff1" +
    "\025\ufff1\032\ufff1\001\002\000\004\024\131\001\002\000" +
    "\022\004\uffec\005\uffec\006\uffec\010\uffec\011\uffec\013\uffec" +
    "\025\uffec\032\uffec\001\002\000\020\004\014\005\026\006" +
    "\021\010\024\011\022\013\013\032\025\001\002\000\022" +
    "\004\014\005\026\006\021\010\024\011\022\013\013\025" +
    "\137\032\025\001\002\000\022\004\ufffa\005\ufffa\006\ufffa" +
    "\010\ufffa\011\ufffa\013\ufffa\025\ufffa\032\ufffa\001\002\000" +
    "\022\004\ufff8\005\ufff8\006\ufff8\010\ufff8\011\ufff8\013\ufff8" +
    "\025\ufff8\032\ufff8\001\002\000\022\004\ufffe\005\ufffe\006" +
    "\ufffe\010\ufffe\011\ufffe\013\ufffe\025\ufffe\032\ufffe\001\002" +
    "\000\022\004\ufffc\005\ufffc\006\ufffc\010\ufffc\011\ufffc\013" +
    "\ufffc\025\ufffc\032\ufffc\001\002\000\022\004\uffe9\005\uffe9" +
    "\006\uffe9\010\uffe9\011\uffe9\013\uffe9\025\uffe9\032\uffe9\001" +
    "\002\000\014\030\142\031\145\032\144\033\141\034\143" +
    "\001\002\000\004\023\uffd0\001\002\000\004\027\161\001" +
    "\002\000\004\023\uffcf\001\002\000\004\027\155\001\002" +
    "\000\004\027\153\001\002\000\004\023\147\001\002\000" +
    "\004\024\150\001\002\000\020\004\014\005\026\006\021" +
    "\010\024\011\022\013\013\032\025\001\002\000\022\004" +
    "\014\005\026\006\021\010\024\011\022\013\013\025\152" +
    "\032\025\001\002\000\024\004\uffea\005\uffea\006\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\025\uffea\032\uffea\001\002" +
    "\000\004\032\154\001\002\000\004\023\uffd2\001\002\000" +
    "\010\030\156\031\160\032\157\001\002\000\004\023\uffd5" +
    "\001\002\000\004\023\uffd1\001\002\000\004\023\uffd3\001" +
    "\002\000\004\032\162\001\002\000\004\023\uffd4\001\002" +
    "\000\006\014\165\026\164\001\002\000\022\004\ufff5\005" +
    "\ufff5\006\ufff5\010\ufff5\011\ufff5\013\ufff5\025\ufff5\032\ufff5" +
    "\001\002\000\004\021\166\001\002\000\012\030\114\031" +
    "\117\032\115\035\113\001\002\000\014\021\170\030\122" +
    "\031\124\032\123\035\121\001\002\000\004\026\171\001" +
    "\002\000\022\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2" +
    "\013\ufff2\025\ufff2\032\ufff2\001\002\000\004\002\000\001" +
    "\002\000\006\014\175\026\174\001\002\000\022\004\ufff7" +
    "\005\ufff7\006\ufff7\010\ufff7\011\ufff7\013\ufff7\025\ufff7\032" +
    "\ufff7\001\002\000\006\030\176\032\177\001\002\000\014" +
    "\015\037\016\036\017\041\020\040\026\206\001\002\000" +
    "\012\015\037\016\036\017\041\020\040\001\002\000\006" +
    "\030\201\032\202\001\002\000\004\026\204\001\002\000" +
    "\004\026\203\001\002\000\022\004\uffe5\005\uffe5\006\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\025\uffe5\032\uffe5\001\002\000" +
    "\022\004\uffe6\005\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6" +
    "\025\uffe6\032\uffe6\001\002\000\006\030\207\032\210\001" +
    "\002\000\022\004\ufff4\005\ufff4\006\ufff4\010\ufff4\011\ufff4" +
    "\013\ufff4\025\ufff4\032\ufff4\001\002\000\004\026\212\001" +
    "\002\000\004\026\211\001\002\000\022\004\uffe7\005\uffe7" +
    "\006\uffe7\010\uffe7\011\uffe7\013\uffe7\025\uffe7\032\uffe7\001" +
    "\002\000\022\004\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8" +
    "\013\uffe8\025\uffe8\032\uffe8\001\002\000\014\030\142\031" +
    "\145\032\144\033\141\034\143\001\002\000\004\023\215" +
    "\001\002\000\004\024\216\001\002\000\020\004\014\005" +
    "\026\006\021\010\024\011\022\013\013\032\025\001\002" +
    "\000\022\004\014\005\026\006\021\010\024\011\022\013" +
    "\013\025\220\032\025\001\002\000\022\004\uffeb\005\uffeb" +
    "\006\uffeb\010\uffeb\011\uffeb\013\uffeb\025\uffeb\032\uffeb\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\017\004\015\006\014\007\016\011" +
    "\011\013\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\134\006\133\007\135\011\132" +
    "\013\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\045\001\001\000\004\012\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\072\001\001\000\004\012\063\001\001" +
    "\000\004\012\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\131\004\015" +
    "\006\014\007\016\011\011\013\022\001\001\000\014\004" +
    "\134\006\133\007\135\011\132\013\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\150\004\015\006\014\007\016\011\011\013" +
    "\022\001\001\000\014\004\134\006\133\007\135\011\132" +
    "\013\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\204\001" +
    "\001\000\004\012\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\216\004\015\006\014\007\016\011\011\013" +
    "\022\001\001\000\014\004\134\006\133\007\135\011\132" +
    "\013\022\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;
    private Symbol tokenError;

    public void syntax_error (Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {


    private Integer operationType = 0;   
    private Integer type = 0;
    private String data_type = "";
    public HashMap variables = new HashMap();

    private boolean execute = true;
    private boolean onLoop = false;

  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _text ::= _text NFLOAT 
            {
              Object RESULT =null;
		int txt1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int txt1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object txt1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int txt2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txt2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt1.toString()+' '+txt2.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _text ::= NFLOAT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _text ::= _text NUMBER 
            {
              Object RESULT =null;
		int txt1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int txt1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object txt1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int txt2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txt2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt1.toString()+' '+txt2.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _text ::= NUMBER 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _text ::= _text IDENTIFIER 
            {
              Object RESULT =null;
		int txt1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int txt1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object txt1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int txt2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txt2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt1.toString()+' '+txt2.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _text ::= IDENTIFIER 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // _text ::= _text TEXT 
            {
              Object RESULT =null;
		int txt1left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int txt1right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object txt1 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int txt2left = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txt2right = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt2 = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt1.toString()+' '+txt2.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // _text ::= TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = txt.toString();
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_text",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condition ::= FALSE 
            {
              Object RESULT =null;
		
        execute = false;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condition ::= TRUE 
            {
              Object RESULT =null;
		
        execute = true;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condition ::= IDENTIFIER COMPARATOR IDENTIFIER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Variable a1 = Store.getVar(a.toString(), variables);
        Variable b1 = Store.getVar(b.toString(), variables);

        execute = Conditions.compare(comp.toString(), a1, b1);
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condition ::= NFLOAT COMPARATOR IDENTIFIER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Number a1 = (Number) Store.parseValue("FLOTANTE", a.toString());
        Variable b1 = Store.getVar(b.toString(), variables);

        execute = Conditions.compare(comp.toString(), a1, b1, "FLOTANTE");
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condition ::= IDENTIFIER COMPARATOR NFLOAT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Variable a1 = Store.getVar(a.toString(), variables);
        Number b1 = (Number) Store.parseValue("FLOTANTE", b.toString());

        execute = Conditions.compare(comp.toString(), a1, b1, "FLOTANTE");
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condition ::= NUMBER COMPARATOR IDENTIFIER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Number a1 = (Number) Store.parseValue("ENTERO", a.toString());
        Variable b1 = Store.getVar(b.toString(), variables);

        execute = Conditions.compare(comp.toString(), a1, b1, "ENTERO");
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condition ::= IDENTIFIER COMPARATOR NUMBER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        Variable a1 = Store.getVar(a.toString(), variables);
        Number b1 = (Number) Store.parseValue("ENTERO", b.toString());

        execute = Conditions.compare(comp.toString(), a1, b1, "ENTERO");
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= DIVIDE 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = op;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= MULTIPLY 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = op;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= SUBTRACT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = op;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= ADD 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		
        RESULT = op;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operation",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operations ::= IDENTIFIER ASSIGN IDENTIFIER operation IDENTIFIER EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(variables, op.toString(), a.toString(), b.toString()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operations ::= IDENTIFIER ASSIGN NFLOAT operation IDENTIFIER EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(aux.getDataType(),Operations.execute(op.toString(), a1, (Number) b1.getValue(), aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operations ::= IDENTIFIER ASSIGN IDENTIFIER operation NFLOAT EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Variable a1 = Store.getVar(a.toString(), variables);
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(),Operations.execute(op.toString(), (Number) a1.getValue(), b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operations ::= IDENTIFIER ASSIGN NFLOAT operation NFLOAT EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(),Operations.execute(op.toString(), a1, b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operations ::= IDENTIFIER ASSIGN NUMBER operation IDENTIFIER EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(op.toString(), a1, (Number) b1.getValue(), aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operations ::= IDENTIFIER ASSIGN IDENTIFIER operation NUMBER EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Variable a1 = Store.getVar(a.toString(), variables);
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(op.toString(), (Number) a1.getValue(), b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operations ::= IDENTIFIER ASSIGN NUMBER operation NUMBER EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(op.toString(), a1, b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operations ::= FLOAT IDENTIFIER ASSIGN IDENTIFIER operation IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            RESULT = Store.castValue(type.toString(), Operations.execute(variables, op.toString(), a.toString(), b.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operations ::= FLOAT IDENTIFIER ASSIGN NFLOAT operation IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Float a1 = Float.parseFloat(a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, (Float) b1.getValue(), type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operations ::= FLOAT IDENTIFIER ASSIGN IDENTIFIER operation NFLOAT EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable a1 = Store.getVar(a.toString(), variables);
            Float b1 = Float.parseFloat(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), (Float) a1.getValue(), b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operations ::= FLOAT IDENTIFIER ASSIGN NFLOAT operation NFLOAT EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Float a1 = Float.parseFloat(a.toString());
            Float b1 = Float.parseFloat(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operations ::= INTEGER IDENTIFIER ASSIGN IDENTIFIER operation IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            RESULT = Store.castValue(type.toString(), Operations.execute(variables, op.toString(), a.toString(), b.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operations ::= INTEGER IDENTIFIER ASSIGN IDENTIFIER operation NUMBER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Variable a1 = Store.getVar(a.toString(), variables);
            Integer b1 = Integer.parseInt(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), (Integer) a1.getValue(), b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operations ::= INTEGER IDENTIFIER ASSIGN NUMBER operation IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Integer a1 = Integer.parseInt(a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, (Integer) b1.getValue(), type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operations ::= INTEGER IDENTIFIER ASSIGN NUMBER operation NUMBER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            Integer a1 = Integer.parseInt(a.toString());
            Integer b1 = Integer.parseInt(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operations",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // _else ::= ELSEC WOPEN block WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_else",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // _if ::= IFC POPEN condition PCLOSE WOPEN block WCLOSE 
            {
              Object RESULT =null;
		
        execute = !execute;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_if",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // conditional ::= WHILE POPEN condition PCLOSE WOPEN block WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("conditional",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conditional ::= _if _else 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("conditional",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // conditional ::= _if 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("conditional",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _print ::= PRINT POPEN IDENTIFIER PCLOSE EOL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
        if(execute) {
            Variable out = Store.getVar(id.toString(), variables);
            MsgUI.sendLog(out.getValue().toString());
            System.out.println(out.getValue());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_print",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // _print ::= PRINT POPEN NFLOAT PCLOSE EOL 
            {
              Object RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object out = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
        if(execute) {
            MsgUI.sendLog(out.toString());
            System.out.println(out.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_print",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // _print ::= PRINT POPEN NUMBER PCLOSE EOL 
            {
              Object RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object out = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
        if(execute) {
            MsgUI.sendLog(out.toString());
            System.out.println(out.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_print",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // _print ::= PRINT POPEN QUOTES _text QUOTES PCLOSE EOL 
            {
              Object RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object out = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		
        if(execute) {
            MsgUI.sendLog(out.toString());
            System.out.println(out.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_print",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= STRING IDENTIFIER ASSIGN QUOTES _text QUOTES EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= FLOAT IDENTIFIER ASSIGN NFLOAT EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= INTEGER IDENTIFIER ASSIGN NUMBER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= STRING IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), null);
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= FLOAT IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), null);
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= INTEGER IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), null);
        }
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block ::= block _print 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= _print 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= block operations 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= operations 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= block conditional 
            {
              Object RESULT =null;
		
        execute = true;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= conditional 
            {
              Object RESULT =null;
		
        execute = true;
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= block declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= VOID MAIN POPEN PCLOSE WOPEN block WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

