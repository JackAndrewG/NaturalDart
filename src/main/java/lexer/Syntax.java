
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 16 23:11:55 ECT 2022
//----------------------------------------------------

package lexer;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import utils.Store;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 16 23:11:55 ECT 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\003\011\000\002\003" +
    "\012\000\002\003\014\000\002\003\015\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\007\000\002\005\007\000\002\005\011\000" +
    "\002\007\011\000\002\007\007\000\002\007\007\000\002" +
    "\007\007\000\002\010\011\000\002\010\015\000\002\010" +
    "\011\000\002\012\011\000\002\012\011\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\012\010\000\002" +
    "\012\010\000\002\012\010\000\002\012\010\000\002\012" +
    "\010\000\002\012\010\000\002\012\010\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\006\003\000\002\006" +
    "\004\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\007\000\002\015\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\012\004\004\005\010\006\006\007\011\001" +
    "\002\000\004\033\ufffc\001\002\000\004\033\225\001\002" +
    "\000\004\033\ufffa\001\002\000\004\002\224\001\002\000" +
    "\004\033\ufffb\001\002\000\004\033\012\001\002\000\004" +
    "\023\013\001\002\000\006\024\016\033\014\001\002\000" +
    "\004\015\215\001\002\000\004\024\211\001\002\000\004" +
    "\025\017\001\002\000\020\004\022\005\033\006\024\010" +
    "\027\011\025\013\021\033\030\001\002\000\022\004\022" +
    "\005\033\006\024\010\027\011\025\013\021\026\210\033" +
    "\030\001\002\000\004\023\202\001\002\000\004\033\162" +
    "\001\002\000\024\004\ufff5\005\ufff5\006\ufff5\010\ufff5\011" +
    "\ufff5\013\ufff5\014\ufff5\026\ufff5\033\ufff5\001\002\000\004" +
    "\033\153\001\002\000\004\023\126\001\002\000\024\004" +
    "\ufff3\005\ufff3\006\ufff3\010\ufff3\011\ufff3\013\ufff3\014\ufff3" +
    "\026\ufff3\033\ufff3\001\002\000\004\023\105\001\002\000" +
    "\004\015\060\001\002\000\024\004\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\011\ufff9\013\ufff9\014\ufff9\026\ufff9\033\ufff9\001" +
    "\002\000\024\004\ufff7\005\ufff7\006\ufff7\010\ufff7\011\ufff7" +
    "\013\ufff7\014\ufff7\026\ufff7\033\ufff7\001\002\000\004\033" +
    "\034\001\002\000\006\015\036\027\035\001\002\000\024" +
    "\004\ufff0\005\ufff0\006\ufff0\010\ufff0\011\ufff0\013\ufff0\014" +
    "\ufff0\026\ufff0\033\ufff0\001\002\000\006\032\040\033\037" +
    "\001\002\000\012\016\044\017\043\020\046\021\045\001" +
    "\002\000\014\016\044\017\043\020\046\021\045\027\042" +
    "\001\002\000\006\032\050\033\047\001\002\000\024\004" +
    "\uffed\005\uffed\006\uffed\010\uffed\011\uffed\013\uffed\014\uffed" +
    "\026\uffed\033\uffed\001\002\000\010\031\uffd4\032\uffd4\033" +
    "\uffd4\001\002\000\010\031\uffd5\032\uffd5\033\uffd5\001\002" +
    "\000\010\031\uffd2\032\uffd2\033\uffd2\001\002\000\010\031" +
    "\uffd3\032\uffd3\033\uffd3\001\002\000\004\027\052\001\002" +
    "\000\004\027\051\001\002\000\024\004\uffe0\005\uffe0\006" +
    "\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\026\uffe0\033\uffe0" +
    "\001\002\000\024\004\uffde\005\uffde\006\uffde\010\uffde\011" +
    "\uffde\013\uffde\014\uffde\026\uffde\033\uffde\001\002\000\006" +
    "\032\055\033\054\001\002\000\004\027\057\001\002\000" +
    "\004\027\056\001\002\000\024\004\uffdf\005\uffdf\006\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\014\uffdf\026\uffdf\033\uffdf\001" +
    "\002\000\024\004\uffdd\005\uffdd\006\uffdd\010\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\026\uffdd\033\uffdd\001\002\000\010\031" +
    "\061\032\063\033\062\001\002\000\012\016\044\017\043" +
    "\020\046\021\045\001\002\000\012\016\044\017\043\020" +
    "\046\021\045\001\002\000\012\016\044\017\043\020\046" +
    "\021\045\001\002\000\006\032\066\033\065\001\002\000" +
    "\004\027\070\001\002\000\004\027\067\001\002\000\024" +
    "\004\uffd9\005\uffd9\006\uffd9\010\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\026\uffd9\033\uffd9\001\002\000\024\004\uffd7\005\uffd7" +
    "\006\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\026\uffd7\033" +
    "\uffd7\001\002\000\010\031\072\032\074\033\073\001\002" +
    "\000\004\027\077\001\002\000\004\027\076\001\002\000" +
    "\004\027\075\001\002\000\024\004\uffd8\005\uffd8\006\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\026\uffd8\033\uffd8\001" +
    "\002\000\024\004\uffd6\005\uffd6\006\uffd6\010\uffd6\011\uffd6" +
    "\013\uffd6\014\uffd6\026\uffd6\033\uffd6\001\002\000\024\004" +
    "\uffdb\005\uffdb\006\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\026\uffdb\033\uffdb\001\002\000\006\031\101\033\102\001" +
    "\002\000\004\027\104\001\002\000\004\027\103\001\002" +
    "\000\024\004\uffda\005\uffda\006\uffda\010\uffda\011\uffda\013" +
    "\uffda\014\uffda\026\uffda\033\uffda\001\002\000\024\004\uffdc" +
    "\005\uffdc\006\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\026" +
    "\uffdc\033\uffdc\001\002\000\012\022\106\031\107\032\111" +
    "\033\110\001\002\000\004\033\121\001\002\000\004\024" +
    "\116\001\002\000\004\024\114\001\002\000\004\024\112" +
    "\001\002\000\004\027\113\001\002\000\024\004\uffe9\005" +
    "\uffe9\006\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\026\uffe9" +
    "\033\uffe9\001\002\000\004\027\115\001\002\000\024\004" +
    "\uffe8\005\uffe8\006\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\026\uffe8\033\uffe8\001\002\000\004\027\117\001\002\000" +
    "\024\004\uffea\005\uffea\006\uffea\010\uffea\011\uffea\013\uffea" +
    "\014\uffea\026\uffea\033\uffea\001\002\000\006\022\122\033" +
    "\123\001\002\000\006\022\uffcc\033\uffcc\001\002\000\004" +
    "\024\124\001\002\000\006\022\uffcb\033\uffcb\001\002\000" +
    "\004\027\125\001\002\000\024\004\uffeb\005\uffeb\006\uffeb" +
    "\010\uffeb\011\uffeb\013\uffeb\014\uffeb\026\uffeb\033\uffeb\001" +
    "\002\000\004\033\130\001\002\000\004\024\137\001\002" +
    "\000\004\030\131\001\002\000\014\031\133\032\136\033" +
    "\135\034\132\035\134\001\002\000\004\024\uffce\001\002" +
    "\000\004\024\uffd1\001\002\000\004\024\uffcd\001\002\000" +
    "\004\024\uffcf\001\002\000\004\024\uffd0\001\002\000\004" +
    "\025\140\001\002\000\020\004\022\005\033\006\024\010" +
    "\027\011\025\013\021\033\030\001\002\000\022\004\022" +
    "\005\033\006\024\010\027\011\025\013\021\026\143\033" +
    "\030\001\002\000\024\004\ufff4\005\ufff4\006\ufff4\010\ufff4" +
    "\011\ufff4\013\ufff4\014\ufff4\026\ufff4\033\ufff4\001\002\000" +
    "\026\004\uffe7\005\uffe7\006\uffe7\010\uffe7\011\uffe7\012\147" +
    "\013\uffe7\014\uffe7\026\uffe7\033\uffe7\001\002\000\024\004" +
    "\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2\013\ufff2\014\ufff2" +
    "\026\ufff2\033\ufff2\001\002\000\024\004\ufff8\005\ufff8\006" +
    "\ufff8\010\ufff8\011\ufff8\013\ufff8\014\ufff8\026\ufff8\033\ufff8" +
    "\001\002\000\024\004\ufff6\005\ufff6\006\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\014\ufff6\026\ufff6\033\ufff6\001\002\000\004" +
    "\025\150\001\002\000\020\004\022\005\033\006\024\010" +
    "\027\011\025\013\021\033\030\001\002\000\022\004\022" +
    "\005\033\006\024\010\027\011\025\013\021\026\152\033" +
    "\030\001\002\000\024\004\uffe6\005\uffe6\006\uffe6\010\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\026\uffe6\033\uffe6\001\002\000" +
    "\006\015\155\027\154\001\002\000\024\004\uffef\005\uffef" +
    "\006\uffef\010\uffef\011\uffef\013\uffef\014\uffef\026\uffef\033" +
    "\uffef\001\002\000\004\022\156\001\002\000\004\033\121" +
    "\001\002\000\006\022\160\033\123\001\002\000\004\027" +
    "\161\001\002\000\024\004\uffec\005\uffec\006\uffec\010\uffec" +
    "\011\uffec\013\uffec\014\uffec\026\uffec\033\uffec\001\002\000" +
    "\006\015\164\027\163\001\002\000\024\004\ufff1\005\ufff1" +
    "\006\ufff1\010\ufff1\011\ufff1\013\ufff1\014\ufff1\026\ufff1\033" +
    "\ufff1\001\002\000\006\031\165\033\166\001\002\000\014" +
    "\016\044\017\043\020\046\021\045\027\175\001\002\000" +
    "\012\016\044\017\043\020\046\021\045\001\002\000\006" +
    "\031\170\033\171\001\002\000\004\027\173\001\002\000" +
    "\004\027\172\001\002\000\024\004\uffe1\005\uffe1\006\uffe1" +
    "\010\uffe1\011\uffe1\013\uffe1\014\uffe1\026\uffe1\033\uffe1\001" +
    "\002\000\024\004\uffe2\005\uffe2\006\uffe2\010\uffe2\011\uffe2" +
    "\013\uffe2\014\uffe2\026\uffe2\033\uffe2\001\002\000\006\031" +
    "\176\033\177\001\002\000\024\004\uffee\005\uffee\006\uffee" +
    "\010\uffee\011\uffee\013\uffee\014\uffee\026\uffee\033\uffee\001" +
    "\002\000\004\027\201\001\002\000\004\027\200\001\002" +
    "\000\024\004\uffe3\005\uffe3\006\uffe3\010\uffe3\011\uffe3\013" +
    "\uffe3\014\uffe3\026\uffe3\033\uffe3\001\002\000\024\004\uffe4" +
    "\005\uffe4\006\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\026" +
    "\uffe4\033\uffe4\001\002\000\004\033\130\001\002\000\004" +
    "\024\204\001\002\000\004\025\205\001\002\000\020\004" +
    "\022\005\033\006\024\010\027\011\025\013\021\033\030" +
    "\001\002\000\022\004\022\005\033\006\024\010\027\011" +
    "\025\013\021\026\207\033\030\001\002\000\024\004\uffe5" +
    "\005\uffe5\006\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\026" +
    "\uffe5\033\uffe5\001\002\000\004\002\000\001\002\000\004" +
    "\025\212\001\002\000\020\004\022\005\033\006\024\010" +
    "\027\011\025\013\021\033\030\001\002\000\022\004\022" +
    "\005\033\006\024\010\027\011\025\013\021\026\214\033" +
    "\030\001\002\000\004\002\uffff\001\002\000\012\022\216" +
    "\031\217\032\221\033\220\001\002\000\004\033\121\001" +
    "\002\000\004\024\uffc9\001\002\000\004\024\uffca\001\002" +
    "\000\004\024\uffc8\001\002\000\006\022\223\033\123\001" +
    "\002\000\004\024\uffc7\001\002\000\004\002\001\001\002" +
    "\000\004\023\226\001\002\000\006\024\227\033\014\001" +
    "\002\000\004\025\240\001\002\000\004\024\231\001\002" +
    "\000\004\025\232\001\002\000\020\004\022\005\033\006" +
    "\024\010\027\011\025\013\021\033\030\001\002\000\022" +
    "\004\022\005\033\006\024\010\027\011\025\013\021\014" +
    "\234\033\030\001\002\000\004\033\235\001\002\000\004" +
    "\027\236\001\002\000\004\026\237\001\002\000\004\002" +
    "\ufffd\001\002\000\020\004\022\005\033\006\024\010\027" +
    "\011\025\013\021\033\030\001\002\000\022\004\022\005" +
    "\033\006\024\010\027\011\025\013\021\014\242\033\030" +
    "\001\002\000\004\033\243\001\002\000\004\027\244\001" +
    "\002\000\004\026\245\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\006\002\004\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\017\005\030\007\025\010" +
    "\031\012\022\001\001\000\012\005\144\007\143\010\145" +
    "\012\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\052\001" +
    "\001\000\004\013\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\077\001\001\000" +
    "\004\013\070\001\001\000\004\013\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\140" +
    "\005\030\007\025\010\031\012\022\001\001\000\012\005" +
    "\144\007\143\010\145\012\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\150\005\030" +
    "\007\025\010\031\012\022\001\001\000\012\005\144\007" +
    "\143\010\145\012\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\173\001\001\000\004\013\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\205\005\030\007" +
    "\025\010\031\012\022\001\001\000\012\005\144\007\143" +
    "\010\145\012\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\212\005\030\007\025" +
    "\010\031\012\022\001\001\000\012\005\144\007\143\010" +
    "\145\012\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\232\005\030\007\025\010\031\012\022\001" +
    "\001\000\012\005\144\007\143\010\145\012\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\240\005\030\007\025\010\031" +
    "\012\022\001\001\000\012\005\144\007\143\010\145\012" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Symbol s;

    public void syntax_error (Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {


    private Integer operationType = 0;   
    private Integer type = 0;
    private String data_type = "";
    public HashMap variables = new HashMap();
    private Number operations(Number a, Number b) {
        System.out.println(a+" ____ "+b+"  "+operationType);
        Number result = 0;
        switch(operationType) {
            case 7: result = a.intValue() + b.intValue(); break;
            default: result = null;
        }
        System.out.println(a+" ____ "+b+"  "+ result);
        operationType = 0;
        return result;
    }

  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SUBTRACTOP ::= NUMBER OPERATION NUMBER EOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
      /*RESULT =  ((Integer) a).intValue() - ((Integer) b).intValue();*/
        System.out.println(a+"____"+b);
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SUBTRACTOP",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAMS ::= IDENTIFIER ASSIGN QUOTES TEXT QUOTES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMS ::= IDENTIFIER ASSIGN NFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMS ::= IDENTIFIER ASSIGN NUMBER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMS ::= IDENTIFIER ASSIGN IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PARAMS",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TEXT ::= TEXT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TEXT ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("TEXT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONDITION ::= IDENTIFIER COMPARATOR FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDITION ::= IDENTIFIER COMPARATOR TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDITION ::= IDENTIFIER COMPARATOR IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDITION ::= IDENTIFIER COMPARATOR NFLOAT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDITION ::= IDENTIFIER COMPARATOR NUMBER 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITION",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERATION ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERATION ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERATION ::= SUBTRACT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERATION ::= ADD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATION",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERATIONS ::= IDENTIFIER ASSIGN IDENTIFIER OPERATION IDENTIFIER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERATIONS ::= IDENTIFIER ASSIGN NFLOAT OPERATION IDENTIFIER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERATIONS ::= IDENTIFIER ASSIGN IDENTIFIER OPERATION NFLOAT EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERATIONS ::= IDENTIFIER ASSIGN NFLOAT OPERATION NFLOAT EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERATIONS ::= IDENTIFIER ASSIGN NUMBER OPERATION IDENTIFIER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERATIONS ::= IDENTIFIER ASSIGN IDENTIFIER OPERATION NUMBER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERATIONS ::= IDENTIFIER ASSIGN NUMBER OPERATION NUMBER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERATIONS ::= FLOAT IDENTIFIER ASSIGN IDENTIFIER OPERATION IDENTIFIER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERATIONS ::= FLOAT IDENTIFIER ASSIGN NFLOAT OPERATION IDENTIFIER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERATIONS ::= FLOAT IDENTIFIER ASSIGN IDENTIFIER OPERATION NFLOAT EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERATIONS ::= FLOAT IDENTIFIER ASSIGN NFLOAT OPERATION NFLOAT EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERATIONS ::= INTEGER IDENTIFIER ASSIGN IDENTIFIER OPERATION IDENTIFIER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERATIONS ::= INTEGER IDENTIFIER ASSIGN IDENTIFIER OPERATION NUMBER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERATIONS ::= INTEGER IDENTIFIER ASSIGN NUMBER OPERATION IDENTIFIER EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERATIONS ::= INTEGER IDENTIFIER ASSIGN NUMBER OPERATION NUMBER EOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATIONS",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONDITIONAL ::= WHILE POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDITIONAL ::= IFC POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE ELSEC WOPEN BLOCK WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDITIONAL ::= IFC POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PRINTOUT ::= PRINT POPEN IDENTIFIER PCLOSE EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRINTOUT",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PRINTOUT ::= PRINT POPEN NFLOAT PCLOSE EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRINTOUT",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PRINTOUT ::= PRINT POPEN NUMBER PCLOSE EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRINTOUT",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PRINTOUT ::= PRINT POPEN QUOTES TEXT QUOTES PCLOSE EOL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("PRINTOUT",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATION ::= STRING IDENTIFIER ASSIGN QUOTES TEXT QUOTES EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		
        variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATION ::= FLOAT IDENTIFIER ASSIGN NFLOAT EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATION ::= INTEGER IDENTIFIER ASSIGN NUMBER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARATION ::= STRING IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        variables = Store.addVar(type.toString(), variables, id.toString(), null);
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARATION ::= FLOAT IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        variables = Store.addVar(type.toString(), variables, id.toString(), null);
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARATION ::= INTEGER IDENTIFIER EOL 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		
        variables = Store.addVar(type.toString(), variables, id.toString(), null);
    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOCK ::= BLOCK PRINTOUT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOCK ::= PRINTOUT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOCK ::= BLOCK OPERATIONS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOCK ::= OPERATIONS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOCK ::= BLOCK CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOCK ::= CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOCK ::= BLOCK DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOCK ::= DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BLOCK",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FTYPE ::= STRING 
            {
              Object RESULT =null;
		 type = sym.STRING; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FTYPE",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FTYPE ::= FLOAT 
            {
              Object RESULT =null;
		 type = sym.FLOAT; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FTYPE",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FTYPE ::= INTEGER 
            {
              Object RESULT =null;
		 type = sym.INTEGER; 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FTYPE",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BEGIN ::= FTYPE IDENTIFIER POPEN PARAMS PCLOSE WOPEN BLOCK RETURNC IDENTIFIER EOL WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BEGIN ::= FTYPE IDENTIFIER POPEN PCLOSE WOPEN BLOCK RETURNC IDENTIFIER EOL WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BEGIN ::= VOID IDENTIFIER POPEN PARAMS PCLOSE WOPEN BLOCK WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BEGIN ::= VOID IDENTIFIER POPEN PCLOSE WOPEN BLOCK WCLOSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("BEGIN",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BEGIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

