package lexer;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import utils.Store;

parser code
{:
    public Symbol s;

    public void syntax_error (Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }
:};

action code
{:
    private Integer operationType = 0;   
    private Integer type = 0;
    private String data_type = "";
    public HashMap variables = new HashMap();
    private Number operations(Number a, Number b) {
        System.out.println(a+" ____ "+b+"  "+operationType);
        Number result = 0;
        switch(operationType) {
            case 7: result = a.intValue() + b.intValue(); break;
            default: result = null;
        }
        System.out.println(a+" ____ "+b+"  "+ result);
        operationType = 0;
        return result;
    }
:}

terminal INTEGER, FLOAT, STRING, VOID, PRINT, IFC, ELSEC, WHILE, RETURNC, ASSIGN, ADD, SUBTRACT, MULTIPLY, DIVIDE,
QUOTES, POPEN, PCLOSE, WOPEN, WCLOSE, EOL, COMPARATOR, NUMBER, NFLOAT, IDENTIFIER, TRUE, FALSE, ERROR;

non terminal FTYPE, BEGIN, BLOCK, DECLARATION, TEXT, PRINTOUT, CONDITIONAL, CONDITION, OPERATIONS, OPERATION, PARAMS, SUBTRACTOP;

start with BEGIN;

BEGIN ::=
    VOID IDENTIFIER POPEN PCLOSE WOPEN BLOCK WCLOSE |
    VOID IDENTIFIER POPEN PARAMS PCLOSE WOPEN BLOCK WCLOSE |
    FTYPE IDENTIFIER POPEN PCLOSE WOPEN BLOCK RETURNC IDENTIFIER EOL WCLOSE |
    FTYPE IDENTIFIER POPEN PARAMS PCLOSE WOPEN BLOCK RETURNC IDENTIFIER EOL WCLOSE
;

FTYPE ::= 
    INTEGER  {: type = sym.INTEGER; :}
    | FLOAT  {: type = sym.FLOAT; :}
    | STRING {: type = sym.STRING; :}
;

BLOCK ::=
    DECLARATION |
    BLOCK DECLARATION
    CONDITIONAL |
    BLOCK CONDITIONAL |
    OPERATIONS |
    BLOCK OPERATIONS
;

DECLARATION ::=
    INTEGER:type IDENTIFIER:id EOL {:
        variables = Store.addVar(type.toString(), variables, id.toString(), null);
    :} |
    FLOAT:type IDENTIFIER:id EOL {:
        variables = Store.addVar(type.toString(), variables, id.toString(), null);
    :} |
    STRING:type IDENTIFIER:id EOL {:
        variables = Store.addVar(type.toString(), variables, id.toString(), null);
    :} |
    INTEGER:type IDENTIFIER:id ASSIGN NUMBER:value EOL {:
        variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
    :} |
    FLOAT:type IDENTIFIER:id ASSIGN NFLOAT:value EOL {:
        variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
    :} |
    STRING:type IDENTIFIER:id ASSIGN QUOTES TEXT:value QUOTES EOL {:
        variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
    :}
;

//PRINTOUT ::=
//    PRINT POPEN QUOTES TEXT QUOTES PCLOSE EOL |
//    PRINT POPEN NUMBER PCLOSE EOL |
//    PRINT POPEN NFLOAT PCLOSE EOL |
//    PRINT POPEN IDENTIFIER PCLOSE EOL
//;

CONDITIONAL ::=
    IFC POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE |
    IFC POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE ELSEC WOPEN BLOCK WCLOSE |
    WHILE POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE
;

OPERATIONS ::=
    /*entero a = 4 - 5;*/
    INTEGER IDENTIFIER ASSIGN NUMBER:a OPERATION NUMBER:b EOL |
    /*entero a = 4 - b;*/
    INTEGER IDENTIFIER ASSIGN NUMBER OPERATION IDENTIFIER EOL |
    /*entero a = b - 5;*/
    INTEGER IDENTIFIER ASSIGN IDENTIFIER OPERATION NUMBER EOL |
    /*entero a = b - c;*/
    INTEGER IDENTIFIER ASSIGN IDENTIFIER OPERATION IDENTIFIER EOL |
    /*entero a = 4 - 5;*/
    FLOAT IDENTIFIER ASSIGN NFLOAT OPERATION NFLOAT EOL |
    /*flotante a = b - 1.0;*/
    FLOAT IDENTIFIER ASSIGN IDENTIFIER OPERATION NFLOAT EOL |
    /*flotante a = 1.0 - b;*/
    FLOAT IDENTIFIER ASSIGN NFLOAT OPERATION IDENTIFIER EOL |
    /*flotante a = b - c;*/
    FLOAT IDENTIFIER ASSIGN IDENTIFIER OPERATION IDENTIFIER EOL |
    /*a = 2 - 1;*/
    IDENTIFIER ASSIGN NUMBER OPERATION NUMBER EOL |
    /*a = b - 1;*/
    IDENTIFIER ASSIGN IDENTIFIER OPERATION NUMBER EOL |
    /*a = 2 - b;*/
    IDENTIFIER ASSIGN NUMBER OPERATION IDENTIFIER EOL |
    /*a = 2.0 - 1;*/
    IDENTIFIER ASSIGN NFLOAT OPERATION NFLOAT EOL |
    /*a = b - 1.0;*/
    IDENTIFIER ASSIGN IDENTIFIER OPERATION NFLOAT EOL |
    /*a = 2.0 - b;*/
    IDENTIFIER ASSIGN NFLOAT OPERATION IDENTIFIER EOL |
    /*a = b - c;*/
    IDENTIFIER ASSIGN IDENTIFIER OPERATION IDENTIFIER EOL
;

OPERATION ::= ADD | SUBTRACT | MULTIPLY | DIVIDE;

CONDITION ::=
    IDENTIFIER COMPARATOR NUMBER |
    IDENTIFIER COMPARATOR NFLOAT |
    IDENTIFIER COMPARATOR IDENTIFIER |
    IDENTIFIER COMPARATOR TRUE |
    IDENTIFIER COMPARATOR FALSE
;

TEXT ::=
    IDENTIFIER |
    TEXT IDENTIFIER
;

PARAMS ::=
    IDENTIFIER ASSIGN IDENTIFIER |
    IDENTIFIER ASSIGN NUMBER |
    IDENTIFIER ASSIGN NFLOAT |
    IDENTIFIER ASSIGN QUOTES TEXT QUOTES
;

SUBTRACTOP ::= 
    NUMBER:a OPERATION:op NUMBER:b EOL {:
      /*RESULT =  ((Integer) a).intValue() - ((Integer) b).intValue();*/
        System.out.println(a+"____"+b);
    :}
;