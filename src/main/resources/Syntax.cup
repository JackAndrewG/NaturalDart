package lexer;
import java_cup.runtime.Symbol;
import java.util.HashMap;
import utils.Store;
import utils.Operations;
import utils.Conditions;
import model.Variable;

parser code
{:
    public Symbol s;

    public void syntax_error (Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }
:};

action code
{:
    private Integer operationType = 0;   
    private Integer type = 0;
    private String data_type = "";
    public HashMap variables = new HashMap();

    private boolean execute = true;
:}

terminal INTEGER, FLOAT, STRING, VOID, PRINT, IFC, ELSEC, WHILE, RETURNC, ASSIGN, ADD, SUBTRACT, MULTIPLY, DIVIDE,
QUOTES, POPEN, PCLOSE, WOPEN, WCLOSE, EOL, COMPARATOR, NUMBER, NFLOAT, IDENTIFIER, TRUE, FALSE, TEXT, ERROR;

non terminal FTYPE, BEGIN, BLOCK, DECLARATION, BTEXT, PRINTOUT, CONDITIONAL, CONDITION, OPERATIONS, OPERATION, PARAMS, _body, _else;

start with BEGIN;

BEGIN ::=
    VOID IDENTIFIER POPEN PCLOSE WOPEN BLOCK WCLOSE |
    VOID IDENTIFIER POPEN PARAMS PCLOSE WOPEN BLOCK WCLOSE |
    FTYPE IDENTIFIER POPEN PCLOSE WOPEN BLOCK RETURNC IDENTIFIER EOL WCLOSE |
    FTYPE IDENTIFIER POPEN PARAMS PCLOSE WOPEN BLOCK RETURNC IDENTIFIER EOL WCLOSE
;

FTYPE ::=
    INTEGER  {: type = sym.INTEGER; :}
    | FLOAT  {: type = sym.FLOAT; :}
    | STRING {: type = sym.STRING; :}
;

BLOCK ::=
    DECLARATION |
    BLOCK DECLARATION |
    CONDITIONAL {:
        execute = true;
    :} |
    BLOCK CONDITIONAL {:
        execute = true;
    :} |
    OPERATIONS |
    BLOCK OPERATIONS |
    PRINTOUT |
    BLOCK PRINTOUT
;

DECLARATION ::=
    INTEGER:type IDENTIFIER:id EOL {:
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), null);
        }
    :} |
    FLOAT:type IDENTIFIER:id EOL {:
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), null);
        }
    :} |
    STRING:type IDENTIFIER:id EOL {:
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), null);
        }
    :} |
    INTEGER:type IDENTIFIER:id ASSIGN NUMBER:value EOL {:
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
        }
    :} |
    FLOAT:type IDENTIFIER:id ASSIGN NFLOAT:value EOL {:
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
        }
    :} |
    STRING:type IDENTIFIER:id ASSIGN QUOTES BTEXT:value QUOTES EOL {:
        if(execute) {
            variables = Store.addVar(type.toString(), variables, id.toString(), value.toString());
        }
    :}
;

PRINTOUT ::=
    PRINT POPEN QUOTES BTEXT:out QUOTES PCLOSE EOL {:
        if(execute) {
            System.out.println(out.toString());
        }
    :} |
    PRINT POPEN NUMBER:out PCLOSE EOL {:
        if(execute) {
            System.out.println(out.toString());
        }
    :} |
    PRINT POPEN NFLOAT:out PCLOSE EOL {:
        if(execute) {
            System.out.println(out.toString());
        }
    :} |
    PRINT POPEN IDENTIFIER:id PCLOSE EOL {:
        if(execute) {
            Variable out = Store.getVar(id.toString(), variables);
            System.out.println(out.getValue());
        }
    :}
;

CONDITIONAL ::=
    _body |
    _body _else |
    WHILE POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE
;

_body ::=
    IFC POPEN CONDITION PCLOSE WOPEN BLOCK WCLOSE {:
        execute = !execute;
    :}
;

_else ::=
    ELSEC WOPEN BLOCK WCLOSE
;

OPERATIONS ::=
    INTEGER:type IDENTIFIER:id ASSIGN NUMBER:a OPERATION:op NUMBER:b EOL {:
        if(execute) {
            Integer a1 = Integer.parseInt(a.toString());
            Integer b1 = Integer.parseInt(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    INTEGER:type IDENTIFIER:id ASSIGN NUMBER:a OPERATION:op IDENTIFIER:b EOL {:
        if(execute) {
            Integer a1 = Integer.parseInt(a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, (Integer) b1.getValue(), type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    INTEGER:type IDENTIFIER:id ASSIGN IDENTIFIER:a OPERATION:op NUMBER:b EOL {:
        if(execute) {
            Variable a1 = Store.getVar(a.toString(), variables);
            Integer b1 = Integer.parseInt(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), (Integer) a1.getValue(), b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    INTEGER:type IDENTIFIER:id ASSIGN IDENTIFIER:a OPERATION:op IDENTIFIER:b EOL {:
        if(execute) {
            RESULT = Store.castValue(type.toString(), Operations.execute(variables, op.toString(), a.toString(), b.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    FLOAT:type IDENTIFIER:id ASSIGN NFLOAT:a OPERATION:op NFLOAT:b EOL {:
        if(execute) {
            Float a1 = Float.parseFloat(a.toString());
            Float b1 = Float.parseFloat(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    FLOAT:type IDENTIFIER:id ASSIGN IDENTIFIER:a OPERATION:op NFLOAT:b EOL {:
        if(execute) {
            Variable a1 = Store.getVar(a.toString(), variables);
            Float b1 = Float.parseFloat(b.toString());

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), (Float) a1.getValue(), b1, type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    FLOAT:type IDENTIFIER:id ASSIGN NFLOAT:a OPERATION:op IDENTIFIER:b EOL {:
        if(execute) {
            Float a1 = Float.parseFloat(a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(type.toString(), Operations.execute(op.toString(), a1, (Float) b1.getValue(), type.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    FLOAT:type IDENTIFIER:id ASSIGN IDENTIFIER:a OPERATION:op IDENTIFIER:b EOL {:
        if(execute) {
            RESULT = Store.castValue(type.toString(), Operations.execute(variables, op.toString(), a.toString(), b.toString()));
            variables = Store.addVar(type.toString(), variables, id.toString(), RESULT.toString());
        }
    :} |
    IDENTIFIER:id ASSIGN NUMBER:a OPERATION:op NUMBER:b EOL {:
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(op.toString(), a1, b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    :} |
    IDENTIFIER:id ASSIGN IDENTIFIER:a OPERATION:op NUMBER:b EOL {:
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Variable a1 = Store.getVar(a.toString(), variables);
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(op.toString(), (Number) a1.getValue(), b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    :} |
    IDENTIFIER:id ASSIGN NUMBER:a OPERATION:op IDENTIFIER:b EOL {:
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(op.toString(), a1, (Number) b1.getValue(), aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    :} |
    IDENTIFIER:id ASSIGN NFLOAT:a OPERATION:op NFLOAT:b EOL {:
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(),Operations.execute(op.toString(), a1, b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    :} |
    IDENTIFIER:id ASSIGN IDENTIFIER:a OPERATION:op NFLOAT:b EOL {:
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Variable a1 = Store.getVar(a.toString(), variables);
            Number b1 = (Number) Store.parseValue(aux.getDataType(), b.toString());

            RESULT = Store.castValue(aux.getDataType(),Operations.execute(op.toString(), (Number) a1.getValue(), b1, aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    :} |
    IDENTIFIER:id ASSIGN NFLOAT:a OPERATION:op IDENTIFIER:b EOL {:
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            Number a1 = (Number) Store.parseValue(aux.getDataType(), a.toString());
            Variable b1 = Store.getVar(b.toString(), variables);

            RESULT = Store.castValue(aux.getDataType(),Operations.execute(op.toString(), a1, (Number) b1.getValue(), aux.getDataType()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    :} |
    IDENTIFIER:id ASSIGN IDENTIFIER:a OPERATION:op IDENTIFIER:b EOL {:
        if(execute) {
            Variable aux = Store.getVar(id.toString(), variables);

            RESULT = Store.castValue(aux.getDataType(), Operations.execute(variables, op.toString(), a.toString(), b.toString()));
            variables = Store.updateValue(variables, id.toString(), RESULT.toString());
        }
    :}
;

OPERATION ::=
    ADD:op {:
        RESULT = op;
    :} |
    SUBTRACT:op {:
        RESULT = op;
    :} |
    MULTIPLY:op {:
        RESULT = op;
    :} |
    DIVIDE:op {:
        RESULT = op;
    :}
;

CONDITION ::=
    IDENTIFIER:a COMPARATOR:comp NUMBER:b {:
        Variable a1 = Store.getVar(a.toString(), variables);
        Number b1 = (Number) Store.parseValue("ENTERO", b.toString());

        execute = Conditions.compare(comp.toString(), a1, b1, "ENTERO");
    :} |
    NUMBER:a COMPARATOR:comp IDENTIFIER:b {:
        Number a1 = (Number) Store.parseValue("ENTERO", a.toString());
        Variable b1 = Store.getVar(b.toString(), variables);

        execute = Conditions.compare(comp.toString(), a1, b1, "ENTERO");
    :} |
    IDENTIFIER:a COMPARATOR:comp NFLOAT:b {:
        Variable a1 = Store.getVar(a.toString(), variables);
        Number b1 = (Number) Store.parseValue("FLOTANTE", b.toString());

        execute = Conditions.compare(comp.toString(), a1, b1, "FLOTANTE");
    :} |
    NFLOAT:a COMPARATOR:comp IDENTIFIER:b {:
        Number a1 = (Number) Store.parseValue("FLOTANTE", a.toString());
        Variable b1 = Store.getVar(b.toString(), variables);

        execute = Conditions.compare(comp.toString(), a1, b1, "FLOTANTE");
    :} |
    IDENTIFIER:a COMPARATOR:comp IDENTIFIER:b {:
        Variable a1 = Store.getVar(a.toString(), variables);
        Variable b1 = Store.getVar(b.toString(), variables);

        execute = Conditions.compare(comp.toString(), a1, b1);
    :} |
    TRUE {:
        execute = true;
    :} |
    FALSE {:
        execute = false;
    :}
;

BTEXT ::=
    TEXT:txt {:
        RESULT = txt.toString();
    :} |
    BTEXT:txt1 TEXT:txt2 {:
        RESULT = txt1.toString()+' '+txt2.toString();
    :} |
    IDENTIFIER:txt {:
        RESULT = txt.toString();
    :} |
    BTEXT:txt1 IDENTIFIER:txt2 {:
        RESULT = txt1.toString()+' '+txt2.toString();
    :} |
    NUMBER:txt {:
        RESULT = txt.toString();
    :} |
    BTEXT:txt1 NUMBER:txt2 {:
        RESULT = txt1.toString()+' '+txt2.toString();
    :} |
    NFLOAT:txt {:
        RESULT = txt.toString();
    :} |
    BTEXT:txt1 NFLOAT:txt2 {:
        RESULT = txt1.toString()+' '+txt2.toString();
    :}
;

PARAMS ::=
    IDENTIFIER ASSIGN IDENTIFIER |
    IDENTIFIER ASSIGN NUMBER |
    IDENTIFIER ASSIGN NFLOAT |
    IDENTIFIER ASSIGN QUOTES BTEXT QUOTES
;